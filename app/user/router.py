from aiogram import F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.dispatcher.router import Router
from aiogram_dialog import DialogManager, StartMode
from pydantic import create_model
from sqlalchemy.ext.asyncio import AsyncSession

from app.dao.dao import UserDAO, BookingDAO
from app.booking.state import BookingState
from app.user.kbs import main_user_kb, user_booking_kb, cancel_book_kb
from app.user.schemas import SUser
# from app.config import broker


router = Router()


# @router.message(CommandStart())
# async def cmd_start(message: Message, session_with_commit: AsyncSession, state: FSMContext):
#     await state.clear()
#     user_data = message.from_user
#     user_id = user_data.id
#     user_info = await UserDAO(session_with_commit).find_one_or_none_by_id(user_id)
#     if user_info is None:
#         user_schema = SUser(id=user_id, first_name=user_data.first_name,
#                             last_name=user_data.last_name, username=user_data.username)
#         await UserDAO(session_with_commit).add(user_schema)
#     text = ("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Binary Bites! üçΩÔ∏è\n\n–ó–¥–µ—Å—å –∫–∞–∂–¥—ã–π –±–∞–π—Ç –≤–∫—É—Å–∞ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω –≤ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ. üòãüíª\n"
#             "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π —Å—Ç–æ–ª–∏–∫ –∏ –∏–∑–±–µ–∂–∞—Ç—å –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è –±—É—Ñ–µ—Ä–∞! üî¢üç¥")
#     await message.answer(text, reply_markup=main_user_kb(user_id))



@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    text = (
        "\U0001F44B –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Binary Bites! \U0001F37DÔ∏è\n\n"
        "–ó–¥–µ—Å—å –∫–∞–∂–¥—ã–π –±–∞–π—Ç –≤–∫—É—Å–∞ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω –≤ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ. \U0001F60B\U0001F4BB\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π —Å—Ç–æ–ª–∏–∫ –∏ –∏–∑–±–µ–∂–∞—Ç—å –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è –±—É—Ñ–µ—Ä–∞! \U0001F522\U0001F374"
    )
    await message.answer(text, reply_markup=main_user_kb(message.from_user.id))


@router.callback_query(F.data == "about_us")
async def cmd_about(call: CallbackQuery):
    await call.answer("–û –Ω–∞—Å")
    about_text = ("üñ•Ô∏è –û Binary Bites üçî\n\n"
                  "–ú—ã - –ø–µ—Ä–≤—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω, –≥–¥–µ –∫—É–ª–∏–Ω–∞—Ä–∏—è –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —Å –∫–æ–¥–æ–º! üë®‚Äçüíªüë©‚Äçüíª\n\n"
                  "üçΩÔ∏è –ù–∞—à–µ –º–µ–Ω—é - —ç—Ç–æ –Ω–∞—Å—Ç–æ—è—â–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º –≤–∫—É—Å–∞:\n\n"
                  "‚Ä¢ –ó–∞–∫—É—Å–∫–∏ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 'Hello World' —Å–∞–ª–∞—Ç–∞ ü•ó\n"
                  "‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ –±–ª—é–¥–∞ –≤–∫–ª—é—á–∞—é—Ç 'Full Stack' –±—É—Ä–≥–µ—Ä üçî\n"
                  "‚Ä¢ –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ –Ω–∞—à —Ñ–∏—Ä–º–µ–Ω–Ω—ã–π 'Python' –∫–æ—Ñ–µ ‚òï\n\n"
                  "üèÜ –ù–∞—à–∞ –º–∏—Å—Å–∏—è - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–µ –≥–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ!\n\n"
                  "üìç –ú—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –ø–æ –∞–¥—Ä–µ—Å—É: —É–ª. –ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è, –¥. 404\n"
                  "üïê –†–∞–±–æ—Ç–∞–µ–º 24/7, –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–∞—Å—Ç–æ—è—â–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–µ —Å–ø—è—Çüòâ\n\n"
                  "–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∫ –Ω–∞–º, —á—Ç–æ–±—ã –æ—Ç–ª–∞–¥–∏—Ç—å —Å–≤–æ–π –∞–ø–ø–µ—Ç–∏—Ç! üçΩÔ∏èüíª")
    await call.message.edit_text(about_text, reply_markup=main_user_kb(call.from_user.id))


@router.callback_query(F.data == "book_table")
async def start_dialog(call: CallbackQuery, dialog_manager: DialogManager):
    await call.answer("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–∏–∫–∞")
    await dialog_manager.start(state=BookingState.count, mode=StartMode.RESET_STACK)


@router.callback_query(F.data == "my_bookings")
async def show_my_bookings(call: CallbackQuery, session: AsyncSession):
    await call.answer("–ú–æ–∏ –±—Ä–æ–Ω–∏")
    user_filter = create_model('UserIDModel', user_id=(int, ...))(user_id=call.from_user.id)
    my_bookings = await BookingDAO(session).find_all(user_filter)
    count_booking = len(my_bookings)
    if count_booking:
        book = True
        text = (f"üéâ –û—Ç–ª–∏—á–Ω–æ! –£ –≤–∞—Å {count_booking} –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–æ–ª–∏–∫–∞(–æ–≤). \n\n"
                f"–ß—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏ –±—Ä–æ–Ω–∏ –∏, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ. üëá")
    else:
        book = False
        text = ("ü§î –ö–∞–∂–µ—Ç—Å—è, —É –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π. \n\n"
                f"–ù–µ –ø—Ä–æ–±–ª–µ–º–∞!  –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ. üòâüëá")
    await call.message.edit_text(text, reply_markup=user_booking_kb(call.from_user.id, book))


@router.callback_query(F.data == "my_booking_all")
async def show_all_my_bookings(call: CallbackQuery, session: AsyncSession):
    await call.answer("–í—Å–µ –º–æ–∏ –±—Ä–æ–Ω–∏")
    user_bookings = await BookingDAO(session).get_bookings_with_details(call.from_user.id)

    if not user_bookings:
        await call.message.edit_text("üòî –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.", reply_markup=None)
        return

    for i, book in enumerate(user_bookings):
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —á—Ç–µ–Ω–∏—è
        booking_date = book.date.strftime("%d.%m.%Y")  # –î–µ–Ω—å.–ú–µ—Å—è—Ü.–ì–æ–¥
        start_time = book.time_slot.start_time
        end_time = book.time_slot.end_time
        booking_number = i + 1
        status = book.status
        cancel = False
        home_page = False
        if status == "booked":
            cancel = True
            status_text = "–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω"
        elif status == "canceled":
            status_text = "–û—Ç–º–µ–Ω–µ–Ω"
        else:
            status_text = "–ó–∞–≤–µ—Ä—à–µ–Ω"
        message_text = (f"<b>–ë—Ä–æ–Ω—å ‚Ññ{booking_number}:</b>\n\n"
                        f"üìÖ <b>–î–∞—Ç–∞:</b> {booking_date}\n"
                        f"üïí <b>–í—Ä–µ–º—è:</b> {start_time} - {end_time}\n"
                        f"ü™ë <b>–°—Ç–æ–ª–∏–∫:</b> ‚Ññ{book.table.id}, –í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {book.table.capacity}\n"
                        f"‚ÑπÔ∏è <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {book.table.description}\n"
                        f"üìå <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}\n\n")
        if booking_number == len(user_bookings):
            home_page = True
        await call.message.answer(message_text, reply_markup=cancel_book_kb(book.id, cancel, home_page))


@router.callback_query(F.data.startswith("cancel_book_"))
async def cancel_booking(call: CallbackQuery, session_with_commit: AsyncSession):
    book_id = int(call.data.split("_")[-1])
    booking_dao = BookingDAO(session_with_commit)
    await booking_dao.cancel_book(book_id)
    await call.answer("–ë—Ä–æ–Ω—å –æ—Ç–º–µ–Ω–µ–Ω–∞!", show_alert=True)
    # await broker.publish(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –∑–∞–ø–∏—Å—å –æ –±—Ä–æ–Ω–∏ —Å ID {book_id}", "admin_msg")
    await call.message.edit_reply_markup(reply_markup=cancel_book_kb(book_id))


@router.callback_query(F.data.startswith("dell_book_"))
async def delete_booking(call: CallbackQuery, session_with_commit: AsyncSession):
    book_id = int(call.data.split("_")[-1])
    await BookingDAO(session_with_commit).delete_book(book_id)
    await call.answer("–ó–∞–ø–∏—Å—å –æ –±—Ä–æ–Ω–∏ —É–¥–∞–ª–µ–Ω–∞!", show_alert=True)
    # await broker.publish(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–∏–ª –∑–∞–ø–∏—Å—å –æ –±—Ä–æ–Ω–∏ —Å ID {book_id}", "admin_msg")
    await call.message.delete()


@router.callback_query(F.data == "back_home")
async def start_dialog(call: CallbackQuery):
    await call.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=main_user_kb(call.from_user.id))
