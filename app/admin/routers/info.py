from collections import defaultdict

from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery
from sqlalchemy.ext.asyncio import AsyncSession

from app.admin.kbs import main_admin_kb, admin_back_kb
from config import settings
from app.dao.dao import UserDAO, BookingDAO
from app.utils.text_parts import chunk_text

router = Router()


@router.callback_query(F.data == "admin_panel")
async def admin_start(call: CallbackQuery):
    if str(call.from_user.id) not in settings.ADMIN_IDS_RAW:
        await call.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", show_alert=True)
        return

    await call.answer("–î–æ—Å—Ç—É–ø –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Ä–∞–∑—Ä–µ—à–µ–Ω!")
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_admin_kb())


@router.callback_query(F.data == "admin_users_stats")
async def admin_users_stats(call: CallbackQuery, session: AsyncSession):
    if str(call.from_user.id) not in settings.ADMIN_IDS_RAW:
        await call.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", show_alert=True)
        return
    await call.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    users_stats = await UserDAO(session).count()
    await call.message.edit_text(f'–í—Å–µ–≥–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö {users_stats} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.', reply_markup=admin_back_kb())


@router.callback_query(F.data == "admin_bookings_stats")
async def admin_bookings_stats(call: CallbackQuery, bot: Bot, session: AsyncSession):
    if str(call.from_user.id) not in settings.ADMIN_IDS_RAW:
        await call.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", show_alert=True)
        return

    await call.answer()

    bookings = await BookingDAO(session).get_all_bookings_with_details()

    if not bookings:
        await call.message.edit_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.", reply_markup=admin_back_kb())
        return

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ –¥–∞—Ç–µ
    grouped = defaultdict(list)
    for b in bookings:
        grouped[b.date].append(b)

    # –°—Ç—Ä–æ–∏–º —Ç–µ–∫—Å—Ç
    parts = []
    for date, bookings_list in sorted(grouped.items()):
        parts.append(f"üìÖ <b>{date}</b>")
        for b in bookings_list:
            user = b.user
            table = b.table
            slot = b.time_slot
            start = slot.start_time if isinstance(slot.start_time, str) else slot.start_time.strftime("%H:%M")
            end = slot.end_time if isinstance(slot.end_time, str) else slot.end_time.strftime("%H:%M")
            if b.status == "booked":
                cancel = True
                status_text = "–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω"
            elif b.status == "canceled":
                status_text = "–û—Ç–º–µ–Ω–µ–Ω"
            else:
                status_text = "–ó–∞–≤–µ—Ä—à–µ–Ω"
            parts.append(
                f"üë§ {user.first_name or ''} {user.last_name or ''} (@{user.username or '‚Äî'})\n"
                f"üçΩÔ∏è –°—Ç–æ–ª #{table.id}, {start}‚Äì{end} - <b>{status_text}</b>"
            )
        parts.append("‚ûñ" * 10)

    full_text = "\n".join(parts)

    # –†–∞–∑–±–∏–≤–∞–µ–º –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
    chunks = chunk_text(full_text)

    # –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
    await call.message.edit_text(chunks[0], reply_markup=admin_back_kb())

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
    for chunk in chunks[1:]:
        await bot.send_message(chat_id=call.message.chat.id, text=chunk)